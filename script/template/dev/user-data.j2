#cloud-config
# See the autoinstall documentation at:
# https://canonical-subiquity.readthedocs-hosted.com/en/latest/reference/autoinstall-reference.html
autoinstall:
  # apt:
  #   disable_components: []
  #   fallback: offline-install
  #   geoip: true
  #   mirror-selection:
  #     primary:
  #     - country-mirror
  #     - arches: &id001
  #       - amd64
  #       - i386
  #       uri: http://archive.ubuntu.com/ubuntu/
  #     - arches: &id002
  #       - s390x
  #       - arm64
  #       - armhf
  #       - powerpc
  #       - ppc64el
  #       - riscv64
  #       uri: http://ports.ubuntu.com/ubuntu-ports
  #   preserve_sources_list: false
  #   security:
  #   - arches: *id001
  #     uri: http://security.ubuntu.com/ubuntu/
  #   - arches: *id002
  #     uri: http://ports.ubuntu.com/ubuntu-ports
  # codecs:
  #   install: false
  # drivers:
  #   install: false
  identity:
    hostname: {{ args.identitiy.hostname }}
    password: {{ args.identitiy.password }}
    realname: {{ args.identitiy.realname }}
    username: {{ args.identitiy.username }}
  kernel:
    package: linux-generic
  keyboard:
    layout: de
    toggle: null
    variant: ''
  locale: en_US.UTF-8
  network:
    ethernets:
      ens18:
        addresses:
        - 192.168.178.30/24
        nameservers:
          addresses: []
          search: [9.9.9.9]
        routes:
        - to: default
          via: 192.168.178.1
    version: 2
  oem:
    install: auto
  source:
    id: ubuntu-server
    search_drivers: false
  ssh:
    allow-pw: no
    authorized-keys: {{ args.ssh.authorized_keys }}
    install-server: true
  storage:
    # layout:
    #   name: lvm
    #   sizing-policy: all
    #   password: {{ args.storage.password }}
    # If the layout feature is used to configure the disks, the config section is not used.
    # https://canonical-subiquity.readthedocs-hosted.com/en/latest/reference/autoinstall-reference.html
    config:
    - type: disk
      id: disk0
      match:
{%- if args.storage.disk.match == "size.largest" %}
        size: largest
{%- elif args.storage.disk.match == "ssd" %}
        ssd: true
{%- endif %}
      ptable: gpt
      wipe: superblock-recursive
      grub_device: true

    # grub partition
    - type: partition
      id: grub-part
      device: disk0
      size: 1G
      flag: bios_grub
      number: 1
      # preserve: false

    # boot partition
    - type: partition
      id: boot-part
      device: disk0
      size: {{ args.storage.boot.size }}
      flag: boot
      number: 2
      # preserve: false

    - type: format
      id: boot-format
      volume: boot-part
      fstype: ext4
      # preserve: false

    - type: mount
      id: boot-mount
      path: /boot
      device: boot-format

    # root partition encypted
    - type: partition
      id: crypt-part
      device: disk0
      size: -1         # rest of disk
      wipe: superblock
      # preserve: false
      number: 3

    # - type: dm_crypt
    #   id: dm_crypt-0
    #   volume: crypt-part
    #   key: setup
      # recovery_keyfile: /tmp/luks-recovery-key-c0mve036
      # recovery_live_location: /root/recovery-key.txt
      # recovery_backup_location: var/log/installer/recovery-key.txt
      # path: /dev/mapper/dm_crypt-0
      # preserve: false

    # - type: lvm_volgroup
    #   id: lvm_volgroup-0
    #   name: ubuntu-vg
    #   devices: [dm_crypt-0]
    #   preserve: false

    # - type: lvm_partition
    #   id: lv-root
    #   name: ubuntu-lv
    #   volgroup: lvm_volgroup-0
    #   size: -1
    #   preserve: false

    # - type: format
    #   id: root-fmt
    #   fstype: ext4
    #   volume: lv-root
    #   # preserve: false

    - type: dm_crypt
      id: crypt-root
      volume: crypt-part
      dm_name: crypt-root
      key: {{ args.storage.password }}

    - type: format
      id: root-fmt
      fstype: btrfs
      label: root
      volume: crypt-root

    - type: mount
      id: root-mount
      path: /
      device: root-fmt
  # early-commands:
  # - echo 'YXNkZgo=' | base64 -d > /tmp/luks-key
  # - chmod 600 /tmp/luks-key
  updates: security
  version: 1

{%- if args.packages is defined %}
  packages: {{ args.packages }}
{%- endif %}

  late-commands:
    # 1. Copy .deb packages to the target system
    - mkdir -p /target/root/data
    - cp /cdrom/data /target/root/data/

    # 2. Install the .deb packages inside the target system
    - curtin in-target -- dpkg -i /root/data/deps/*.deb || true

    # 3. install additional packages
    - curtin in-target -- curl -o webmin-setup-repo.sh https://raw.githubusercontent.com/webmin/webmin/master/webmin-setup-repo.sh 
    - curtin in-target -- sh webmin-setup-repo.sh
    - curtin in-target -- apt-get install --install-recommends webmin usermin